--1.Create a temp table to show how many stops each route has. 
--the table should have fields for the route number and the number of stops. 
--Insert into it from BusRouteStops and then select from the temp table.
Use MetroAlt

Create Table #TempStops --has # in front, this denotes a local, session-specific temp table
(
	BusRouteNumber int,
	BusStopNumber int
)

Insert into #TempStops(BusRouteNumber, BusStopNumber)
Select BusRouteKey, BusStopKey from BusRouteStops


Select * from #TempStops

--2.Do the same but using a global temp table.
Create Table ##TempStops --has # in front, this denotes a local, session-specific temp table
(
	BusRouteNumber int,
	BusStopNumber int
)

Insert into ##TempStops(BusRouteNumber, BusStopNumber)
Select BusRouteKey, BusStopKey from BusRouteStops


Select * from ##TempStops

--3.Create a function to create an employee email address. 
--Every employee Email follows the pattern of "firstName.lastName@metroalt.com"
Go
Alter function fx_Email
(@firstName nvarchar(255), @lastName nvarchar(255))--separate multiple parameters with comma
returns nvarchar(255)
As
Begin
Declare @Email as nvarchar(255)
Set @Email = @firstName + '.' + @lastName + '@metroalt.com'
Return @Email
End


Select EmployeeKey, dbo.fx_Email(EmployeeFirstName, EmployeeLastName) as Email from Employee
Order by EmployeeKey

--4.Create a function to determine a two week pay check of an individual employee.
Go
Alter function fx_TwoWeekPay    --this is marked 'alter' because I had to alter the 
(@EmployeePayRate decimal(7,2)) --data type a couple of times to avoid overrunning the 
returns decimal(7,2)            --data type that I had originally declared
As
Begin
Declare @TwoWeekPay as decimal(7,2)
Set @TwoWeekPay = @EmployeePayRate * 80
Return @TwoWeekPay
End

Select EmployeeKey, dbo.fx_TwoWeekPay(EmployeeHourlyPayRate) as EveryTwoWeeks from EmployeePosition
Order by EveryTwoWeeks DESC

--5.Create a function to determine a hourly rate for a new employee. 
--Take difference between top and bottom pay for the new employees position (say driver) 
--and then subtract the difference from the maximum pay. (and yes this is very arbitrary).
Go
Create function fx_NewEmployeePayRate
(@PositionKey int, @EmployeeHourlyPayRateMax decimal(5,2), @EmployeeHourlyPayRateMin decimal(5,2))
returns decimal(5,2)
As
Begin
Declare @NewEmployeePayRate as decimal(5,2)
Set @NewEmployeePayRate = @EmployeeHourlyPayRateMax - (DIFFERENCE(@EmployeeHourlyPayRateMax,@EmployeeHourlyPayRateMin))
Return @NewEmployeePayRate


--6.Create a stored procedure to enter a new employee, position and pay rate which 
--uses the functions to create an email address and the one to determine initial pay. 
--Use the stored procedure to add a new employee.

--6.1.Create a stored procedure that allows an employee to edit their own information name, address, city, zip, not email etc.  
--The employee key should be one of its parameters. Use the procedure to alter one of the employees information

--7.Create a trigger to fire when an employee is assigned to a second shift in a day. Have it write to an overtime table. the Trigger should create the overtime table if it doesn't exist. Add an employee for two shifts to test the trigger.
